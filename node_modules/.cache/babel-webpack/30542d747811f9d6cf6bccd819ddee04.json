{"ast":null,"code":"import { __awaiter } from 'tslib';\nimport * as i0 from '@angular/core';\nimport { EventEmitter, Injectable, Inject, Directive, Input, NgModule, Optional, SkipSelf } from '@angular/core';\nimport { BehaviorSubject, skip, filter, take, ReplaySubject, AsyncSubject, isObservable } from 'rxjs';\nimport { CommonModule } from '@angular/common';\n\nclass BaseLoginProvider {\n  constructor() {}\n\n  loadScript(id, src, onload, parentElement = null) {\n    // get document if platform is only browser\n    if (typeof document !== 'undefined' && !document.getElementById(id)) {\n      let signInJS = document.createElement('script');\n      signInJS.async = true;\n      signInJS.src = src;\n      signInJS.onload = onload;\n\n      if (!parentElement) {\n        parentElement = document.head;\n      }\n\n      parentElement.appendChild(signInJS);\n    }\n  }\n\n}\n\nclass SocialUser {}\n\nconst defaultInitOptions = {\n  oneTapEnabled: true\n};\n\nclass GoogleLoginProvider extends BaseLoginProvider {\n  constructor(clientId, initOptions) {\n    super();\n    this.clientId = clientId;\n    this.initOptions = initOptions;\n    this.changeUser = new EventEmitter();\n    this._socialUser = new BehaviorSubject(null);\n    this._accessToken = new BehaviorSubject(null);\n    this._receivedAccessToken = new EventEmitter();\n    this.initOptions = Object.assign(Object.assign({}, defaultInitOptions), this.initOptions); // emit changeUser events but skip initial value from behaviorSubject\n\n    this._socialUser.pipe(skip(1)).subscribe(this.changeUser); // emit receivedAccessToken but skip initial value from behaviorSubject\n\n\n    this._accessToken.pipe(skip(1)).subscribe(this._receivedAccessToken);\n  }\n\n  initialize(autoLogin) {\n    return new Promise((resolve, reject) => {\n      try {\n        this.loadScript(GoogleLoginProvider.PROVIDER_ID, 'https://accounts.google.com/gsi/client', () => {\n          var _a;\n\n          google.accounts.id.initialize({\n            client_id: this.clientId,\n            auto_select: autoLogin,\n            callback: ({\n              credential\n            }) => {\n              const socialUser = this.createSocialUser(credential);\n\n              this._socialUser.next(socialUser);\n            },\n            prompt_parent_id: (_a = this.initOptions) === null || _a === void 0 ? void 0 : _a.prompt_parent_id,\n            itp_support: this.initOptions.oneTapEnabled\n          });\n\n          if (this.initOptions.oneTapEnabled) {\n            this._socialUser.pipe(filter(user => user === null)).subscribe(() => google.accounts.id.prompt(console.debug));\n          }\n\n          if (this.initOptions.scopes) {\n            const scope = this.initOptions.scopes instanceof Array ? this.initOptions.scopes.filter(s => s).join(' ') : this.initOptions.scopes;\n            this._tokenClient = google.accounts.oauth2.initTokenClient({\n              client_id: this.clientId,\n              scope,\n              prompt: this.initOptions.prompt,\n              callback: tokenResponse => {\n                if (tokenResponse.error) {\n                  this._accessToken.error({\n                    code: tokenResponse.error,\n                    description: tokenResponse.error_description,\n                    uri: tokenResponse.error_uri\n                  });\n                } else {\n                  this._accessToken.next(tokenResponse.access_token);\n                }\n              }\n            });\n          }\n\n          resolve();\n        });\n      } catch (err) {\n        reject(err);\n      }\n    });\n  }\n\n  getLoginStatus() {\n    return new Promise((resolve, reject) => {\n      if (this._socialUser.value) {\n        resolve(this._socialUser.value);\n      } else {\n        reject(`No user is currently logged in with ${GoogleLoginProvider.PROVIDER_ID}`);\n      }\n    });\n  }\n\n  refreshToken() {\n    return new Promise((resolve, reject) => {\n      google.accounts.id.revoke(this._socialUser.value.id, response => {\n        if (response.error) reject(response.error);else resolve(this._socialUser.value);\n      });\n    });\n  }\n\n  getAccessToken() {\n    return new Promise((resolve, reject) => {\n      var _a;\n\n      if (!this._tokenClient) {\n        if (this._socialUser.value) {\n          reject('No token client was instantiated, you should specify some scopes.');\n        } else {\n          reject('You should be logged-in first.');\n        }\n      } else {\n        this._tokenClient.requestAccessToken({\n          hint: (_a = this._socialUser.value) === null || _a === void 0 ? void 0 : _a.email\n        });\n\n        this._receivedAccessToken.pipe(take(1)).subscribe(resolve);\n      }\n    });\n  }\n\n  revokeAccessToken() {\n    return new Promise((resolve, reject) => {\n      if (!this._tokenClient) {\n        reject('No token client was instantiated, you should specify some scopes.');\n      } else if (!this._accessToken.value) {\n        reject('No access token to revoke');\n      } else {\n        google.accounts.oauth2.revoke(this._accessToken.value, () => {\n          this._accessToken.next(null);\n\n          resolve();\n        });\n      }\n    });\n  }\n\n  signIn() {\n    return Promise.reject('You should not call this method directly for Google, use \"<asl-google-signin-button>\" wrapper ' + 'or generate the button yourself with \"google.accounts.id.renderButton()\" ' + '(https://developers.google.com/identity/gsi/web/guides/display-button#javascript)');\n  }\n\n  signOut() {\n    return __awaiter(this, void 0, void 0, function* () {\n      google.accounts.id.disableAutoSelect();\n\n      this._socialUser.next(null);\n    });\n  }\n\n  createSocialUser(idToken) {\n    const user = new SocialUser();\n    user.idToken = idToken;\n    const payload = this.decodeJwt(idToken);\n    user.id = payload.sub;\n    user.name = payload.name;\n    user.email = payload.email;\n    user.photoUrl = payload.picture;\n    user.firstName = payload['given_name'];\n    user.lastName = payload['family_name'];\n    return user;\n  }\n\n  decodeJwt(idToken) {\n    const base64Url = idToken.split(\".\")[1];\n    const base64 = base64Url.replace(/-/g, \"+\").replace(/_/g, \"/\");\n    const jsonPayload = decodeURIComponent(window.atob(base64).split(\"\").map(function (c) {\n      return \"%\" + (\"00\" + c.charCodeAt(0).toString(16)).slice(-2);\n    }).join(\"\"));\n    return JSON.parse(jsonPayload);\n  }\n\n}\n\nGoogleLoginProvider.PROVIDER_ID = 'GOOGLE';\n/**\r\n * The service encapsulating the social login functionality. Exposes methods like\r\n * `signIn`, `signOut`. Also, exposes an `authState` `Observable` that one can\r\n * subscribe to get the current logged in user information.\r\n *\r\n * @dynamic\r\n */\n\nclass SocialAuthService {\n  /** An `Observable` that one can subscribe to get the current logged in user information */\n  get authState() {\n    return this._authState.asObservable();\n  }\n  /** An `Observable` to communicate the readiness of the service and associated login providers */\n\n\n  get initState() {\n    return this._initState.asObservable();\n  }\n  /**\r\n   * @param config A `SocialAuthServiceConfig` object or a `Promise` that resolves to a `SocialAuthServiceConfig` object\r\n   */\n\n\n  constructor(config, _ngZone, _injector) {\n    this._ngZone = _ngZone;\n    this._injector = _injector;\n    this.providers = new Map();\n    this.autoLogin = false;\n    this._user = null;\n    this._authState = new ReplaySubject(1);\n    /* Consider making this an enum comprising LOADING, LOADED, FAILED etc. */\n\n    this.initialized = false;\n    this._initState = new AsyncSubject();\n\n    if (config instanceof Promise) {\n      config.then(config => {\n        this.initialize(config);\n      });\n    } else {\n      this.initialize(config);\n    }\n  }\n\n  initialize(config) {\n    this.autoLogin = config.autoLogin !== undefined ? config.autoLogin : false;\n    const {\n      onError = console.error\n    } = config;\n    config.providers.forEach(item => {\n      this.providers.set(item.id, 'prototype' in item.provider ? this._injector.get(item.provider) : item.provider);\n    });\n    Promise.all(Array.from(this.providers.values()).map(provider => provider.initialize(this.autoLogin))).then(() => {\n      if (this.autoLogin) {\n        const loginStatusPromises = [];\n        let loggedIn = false;\n        this.providers.forEach((provider, key) => {\n          const promise = provider.getLoginStatus();\n          loginStatusPromises.push(promise);\n          promise.then(user => {\n            this.setUser(user, key);\n            loggedIn = true;\n          }).catch(console.debug);\n        });\n        Promise.all(loginStatusPromises).catch(() => {\n          if (!loggedIn) {\n            this._user = null;\n\n            this._authState.next(null);\n          }\n        });\n      }\n\n      this.providers.forEach((provider, key) => {\n        if (isObservable(provider.changeUser)) {\n          provider.changeUser.subscribe(user => {\n            this._ngZone.run(() => {\n              this.setUser(user, key);\n            });\n          });\n        }\n      });\n    }).catch(error => {\n      onError(error);\n    }).finally(() => {\n      this.initialized = true;\n\n      this._initState.next(this.initialized);\n\n      this._initState.complete();\n    });\n  }\n\n  getAccessToken(providerId) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const providerObject = this.providers.get(providerId);\n\n      if (!this.initialized) {\n        throw SocialAuthService.ERR_NOT_INITIALIZED;\n      } else if (!providerObject) {\n        throw SocialAuthService.ERR_LOGIN_PROVIDER_NOT_FOUND;\n      } else if (!(providerObject instanceof GoogleLoginProvider)) {\n        throw SocialAuthService.ERR_NOT_SUPPORTED_FOR_ACCESS_TOKEN;\n      }\n\n      return yield providerObject.getAccessToken();\n    });\n  }\n\n  refreshAuthToken(providerId) {\n    return new Promise((resolve, reject) => {\n      if (!this.initialized) {\n        reject(SocialAuthService.ERR_NOT_INITIALIZED);\n      } else {\n        const providerObject = this.providers.get(providerId);\n\n        if (providerObject) {\n          if (typeof providerObject.refreshToken !== 'function') {\n            reject(SocialAuthService.ERR_NOT_SUPPORTED_FOR_REFRESH_TOKEN);\n          } else {\n            providerObject.refreshToken().then(user => {\n              this.setUser(user, providerId);\n              resolve();\n            }).catch(err => {\n              reject(err);\n            });\n          }\n        } else {\n          reject(SocialAuthService.ERR_LOGIN_PROVIDER_NOT_FOUND);\n        }\n      }\n    });\n  }\n\n  refreshAccessToken(providerId) {\n    return new Promise((resolve, reject) => {\n      if (!this.initialized) {\n        reject(SocialAuthService.ERR_NOT_INITIALIZED);\n      } else if (providerId !== GoogleLoginProvider.PROVIDER_ID) {\n        reject(SocialAuthService.ERR_NOT_SUPPORTED_FOR_REFRESH_TOKEN);\n      } else {\n        const providerObject = this.providers.get(providerId);\n\n        if (providerObject instanceof GoogleLoginProvider) {\n          providerObject.revokeAccessToken().then(resolve).catch(reject);\n        } else {\n          reject(SocialAuthService.ERR_LOGIN_PROVIDER_NOT_FOUND);\n        }\n      }\n    });\n  }\n  /**\r\n   * A method used to sign in a user with a specific `LoginProvider`.\r\n   *\r\n   * @param providerId Id with which the `LoginProvider` has been registered with the service\r\n   * @param signInOptions Optional `LoginProvider` specific arguments\r\n   * @returns A `Promise` that resolves to the authenticated user information\r\n   */\n\n\n  signIn(providerId, signInOptions) {\n    return new Promise((resolve, reject) => {\n      if (!this.initialized) {\n        reject(SocialAuthService.ERR_NOT_INITIALIZED);\n      } else {\n        let providerObject = this.providers.get(providerId);\n\n        if (providerObject) {\n          providerObject.signIn(signInOptions).then(user => {\n            this.setUser(user, providerId);\n            resolve(user);\n          }).catch(err => {\n            reject(err);\n          });\n        } else {\n          reject(SocialAuthService.ERR_LOGIN_PROVIDER_NOT_FOUND);\n        }\n      }\n    });\n  }\n  /**\r\n   * A method used to sign out the currently loggen in user.\r\n   *\r\n   * @param revoke Optional parameter to specify whether a hard sign out is to be performed\r\n   * @returns A `Promise` that resolves if the operation is successful, rejects otherwise\r\n   */\n\n\n  signOut(revoke = false) {\n    return new Promise((resolve, reject) => {\n      if (!this.initialized) {\n        reject(SocialAuthService.ERR_NOT_INITIALIZED);\n      } else if (!this._user) {\n        reject(SocialAuthService.ERR_NOT_LOGGED_IN);\n      } else {\n        let providerId = this._user.provider;\n        let providerObject = this.providers.get(providerId);\n\n        if (providerObject) {\n          providerObject.signOut(revoke).then(() => {\n            resolve();\n            this.setUser(null);\n          }).catch(err => {\n            reject(err);\n          });\n        } else {\n          reject(SocialAuthService.ERR_LOGIN_PROVIDER_NOT_FOUND);\n        }\n      }\n    });\n  }\n\n  setUser(user, id) {\n    if (user && id) user.provider = id;\n    this._user = user;\n\n    this._authState.next(user);\n  }\n\n}\n\nSocialAuthService.ERR_LOGIN_PROVIDER_NOT_FOUND = 'Login provider not found';\nSocialAuthService.ERR_NOT_LOGGED_IN = 'Not logged in';\nSocialAuthService.ERR_NOT_INITIALIZED = 'Login providers not ready yet. Are there errors on your console?';\nSocialAuthService.ERR_NOT_SUPPORTED_FOR_REFRESH_TOKEN = 'Chosen login provider is not supported for refreshing a token';\nSocialAuthService.ERR_NOT_SUPPORTED_FOR_ACCESS_TOKEN = 'Chosen login provider is not supported for getting an access token';\nSocialAuthService.ɵfac = i0.ɵɵngDeclareFactory({\n  minVersion: \"12.0.0\",\n  version: \"15.1.3\",\n  ngImport: i0,\n  type: SocialAuthService,\n  deps: [{\n    token: 'SocialAuthServiceConfig'\n  }, {\n    token: i0.NgZone\n  }, {\n    token: i0.Injector\n  }],\n  target: i0.ɵɵFactoryTarget.Injectable\n});\nSocialAuthService.ɵprov = i0.ɵɵngDeclareInjectable({\n  minVersion: \"12.0.0\",\n  version: \"15.1.3\",\n  ngImport: i0,\n  type: SocialAuthService,\n  providedIn: 'root'\n});\ni0.ɵɵngDeclareClassMetadata({\n  minVersion: \"12.0.0\",\n  version: \"15.1.3\",\n  ngImport: i0,\n  type: SocialAuthService,\n  decorators: [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }],\n  ctorParameters: function () {\n    return [{\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: ['SocialAuthServiceConfig']\n      }]\n    }, {\n      type: i0.NgZone\n    }, {\n      type: i0.Injector\n    }];\n  }\n});\n\nclass GoogleSigninButtonDirective {\n  constructor(el, socialAuthService) {\n    this.type = 'icon';\n    this.size = 'medium';\n    this.text = 'signin_with';\n    this.shape = 'rectangular';\n    this.theme = 'outline';\n    this.logo_alignment = 'left';\n    this.width = '';\n    this.locale = '';\n    socialAuthService.initState.pipe(take(1)).subscribe(() => {\n      Promise.resolve(this.width).then(value => {\n        if (value > '400' || value < '200' && value != '') {\n          Promise.reject('Please note .. max-width 400 , min-width 200 ' + '(https://developers.google.com/identity/gsi/web/tools/configurator)');\n        } else {\n          google.accounts.id.renderButton(el.nativeElement, {\n            type: this.type,\n            size: this.size,\n            text: this.text,\n            width: this.width,\n            shape: this.shape,\n            theme: this.theme,\n            logo_alignment: this.logo_alignment,\n            locale: this.locale\n          });\n        }\n      });\n    });\n  }\n\n}\n\nGoogleSigninButtonDirective.ɵfac = i0.ɵɵngDeclareFactory({\n  minVersion: \"12.0.0\",\n  version: \"15.1.3\",\n  ngImport: i0,\n  type: GoogleSigninButtonDirective,\n  deps: [{\n    token: i0.ElementRef\n  }, {\n    token: SocialAuthService\n  }],\n  target: i0.ɵɵFactoryTarget.Directive\n});\nGoogleSigninButtonDirective.ɵdir = i0.ɵɵdefineDirective({\n  type: GoogleSigninButtonDirective,\n  selectors: [[\"asl-google-signin-button\"]],\n  inputs: {\n    type: \"type\",\n    size: \"size\",\n    text: \"text\",\n    shape: \"shape\",\n    theme: \"theme\",\n    logo_alignment: \"logo_alignment\",\n    width: \"width\",\n    locale: \"locale\"\n  }\n});\ni0.ɵɵngDeclareClassMetadata({\n  minVersion: \"12.0.0\",\n  version: \"15.1.3\",\n  ngImport: i0,\n  type: GoogleSigninButtonDirective,\n  decorators: [{\n    type: Directive,\n    args: [{\n      // eslint-disable-next-line @angular-eslint/directive-selector\n      selector: 'asl-google-signin-button'\n    }]\n  }],\n  ctorParameters: function () {\n    return [{\n      type: i0.ElementRef\n    }, {\n      type: SocialAuthService\n    }];\n  },\n  propDecorators: {\n    type: [{\n      type: Input\n    }],\n    size: [{\n      type: Input\n    }],\n    text: [{\n      type: Input\n    }],\n    shape: [{\n      type: Input\n    }],\n    theme: [{\n      type: Input\n    }],\n    logo_alignment: [{\n      type: Input\n    }],\n    width: [{\n      type: Input\n    }],\n    locale: [{\n      type: Input\n    }]\n  }\n});\n/**\r\n * The main module of angularx-social-login library.\r\n */\n\nclass SocialLoginModule {\n  static initialize(config) {\n    return {\n      ngModule: SocialLoginModule,\n      providers: [SocialAuthService, {\n        provide: 'SocialAuthServiceConfig',\n        useValue: config\n      }]\n    };\n  }\n\n  constructor(parentModule) {\n    if (parentModule) {\n      throw new Error('SocialLoginModule is already loaded. Import it in the AppModule only');\n    }\n  }\n\n}\n\nSocialLoginModule.ɵfac = i0.ɵɵngDeclareFactory({\n  minVersion: \"12.0.0\",\n  version: \"15.1.3\",\n  ngImport: i0,\n  type: SocialLoginModule,\n  deps: [{\n    token: SocialLoginModule,\n    optional: true,\n    skipSelf: true\n  }],\n  target: i0.ɵɵFactoryTarget.NgModule\n});\nSocialLoginModule.ɵmod = i0.ɵɵngDeclareNgModule({\n  minVersion: \"14.0.0\",\n  version: \"15.1.3\",\n  ngImport: i0,\n  type: SocialLoginModule,\n  declarations: [GoogleSigninButtonDirective],\n  imports: [CommonModule],\n  exports: [GoogleSigninButtonDirective]\n});\nSocialLoginModule.ɵinj = i0.ɵɵngDeclareInjector({\n  minVersion: \"12.0.0\",\n  version: \"15.1.3\",\n  ngImport: i0,\n  type: SocialLoginModule,\n  providers: [SocialAuthService],\n  imports: [CommonModule]\n});\ni0.ɵɵngDeclareClassMetadata({\n  minVersion: \"12.0.0\",\n  version: \"15.1.3\",\n  ngImport: i0,\n  type: SocialLoginModule,\n  decorators: [{\n    type: NgModule,\n    args: [{\n      declarations: [GoogleSigninButtonDirective],\n      imports: [CommonModule],\n      providers: [SocialAuthService],\n      exports: [GoogleSigninButtonDirective]\n    }]\n  }],\n  ctorParameters: function () {\n    return [{\n      type: SocialLoginModule,\n      decorators: [{\n        type: Optional\n      }, {\n        type: SkipSelf\n      }]\n    }];\n  }\n}); // Simulates login / logout without actually requiring an Internet connection.\n//\n// Useful for certain development situations.\n//\n// For example, if you want to simulate the greatest football referee England has ever produced:\n//\n//  const dummyUser: SocialUser = {\n//     id: '0123456789',\n//     name: 'Howard Webb',\n//     email: 'howard@webb.com',\n//     firstName: 'Howard',\n//     lastName: 'Webb',\n//     authToken: 'dummyAuthToken',\n//     photoUrl: 'https://en.wikipedia.org/wiki/Howard_Webb#/media/File:Howard_Webb_march11.jpg',\n//     provider: 'DUMMY',\n//     idToken: 'dummyIdToken',\n//     authorizationCode: 'dummyAuthCode'\n// };\n//\n//  let config = new AuthServiceConfig([\n//  { ... },\n//  {\n//       id: DummyLoginProvider.PROVIDER_ID,\n//       provider: new DummyLoginProvider(dummyUser)  // Pass your user into the constructor\n//   },\n//  { ... }\n//  ]);\n\nclass DummyLoginProvider extends BaseLoginProvider {\n  constructor(dummy) {\n    super();\n\n    if (dummy) {\n      this.dummy = dummy;\n    } else {\n      this.dummy = DummyLoginProvider.DEFAULT_USER;\n    } // Start not logged in\n\n\n    this.loggedIn = false;\n  }\n\n  getLoginStatus() {\n    return new Promise((resolve, reject) => {\n      if (this.loggedIn) {\n        resolve(this.dummy);\n      } else {\n        reject('No user is currently logged in.');\n      }\n    });\n  }\n\n  initialize() {\n    return new Promise((resolve, reject) => {\n      resolve();\n    });\n  }\n\n  signIn() {\n    return new Promise((resolve, reject) => {\n      this.loggedIn = true;\n      resolve(this.dummy);\n    });\n  }\n\n  signOut(revoke) {\n    return new Promise((resolve, reject) => {\n      this.loggedIn = false;\n      resolve();\n    });\n  }\n\n}\n\nDummyLoginProvider.PROVIDER_ID = 'DUMMY';\nDummyLoginProvider.DEFAULT_USER = {\n  id: '1234567890',\n  name: 'Mickey Mouse',\n  email: 'mickey@mouse.com',\n  firstName: 'Mickey',\n  lastName: 'Mouse',\n  authToken: 'dummyAuthToken',\n  photoUrl: 'https://en.wikipedia.org/wiki/File:Mickey_Mouse.png',\n  provider: 'DUMMY',\n  idToken: 'dummyIdToken',\n  authorizationCode: 'dummyAuthCode',\n  response: {}\n};\n\nclass FacebookLoginProvider extends BaseLoginProvider {\n  constructor(clientId, initOptions = {}) {\n    super();\n    this.clientId = clientId;\n    this.requestOptions = {\n      scope: 'email,public_profile',\n      locale: 'en_US',\n      fields: 'name,email,picture,first_name,last_name',\n      version: 'v10.0'\n    };\n    this.requestOptions = Object.assign(Object.assign({}, this.requestOptions), initOptions);\n  }\n\n  initialize() {\n    return new Promise((resolve, reject) => {\n      try {\n        this.loadScript(FacebookLoginProvider.PROVIDER_ID, `//connect.facebook.net/${this.requestOptions.locale}/sdk.js`, () => {\n          FB.init({\n            appId: this.clientId,\n            autoLogAppEvents: true,\n            cookie: true,\n            xfbml: true,\n            version: this.requestOptions.version\n          });\n          resolve();\n        });\n      } catch (err) {\n        reject(err);\n      }\n    });\n  }\n\n  getLoginStatus() {\n    return new Promise((resolve, reject) => {\n      FB.getLoginStatus(response => {\n        if (response.status === 'connected') {\n          let authResponse = response.authResponse;\n          FB.api(`/me?fields=${this.requestOptions.fields}`, fbUser => {\n            let user = new SocialUser();\n            user.id = fbUser.id;\n            user.name = fbUser.name;\n            user.email = fbUser.email;\n            user.photoUrl = 'https://graph.facebook.com/' + fbUser.id + '/picture?type=normal&access_token=' + authResponse.accessToken;\n            user.firstName = fbUser.first_name;\n            user.lastName = fbUser.last_name;\n            user.authToken = authResponse.accessToken;\n            user.response = fbUser;\n            resolve(user);\n          });\n        } else {\n          reject(`No user is currently logged in with ${FacebookLoginProvider.PROVIDER_ID}`);\n        }\n      });\n    });\n  }\n\n  signIn(signInOptions) {\n    const options = Object.assign(Object.assign({}, this.requestOptions), signInOptions);\n    return new Promise((resolve, reject) => {\n      FB.login(response => {\n        if (response.authResponse) {\n          let authResponse = response.authResponse;\n          FB.api(`/me?fields=${options.fields}`, fbUser => {\n            let user = new SocialUser();\n            user.id = fbUser.id;\n            user.name = fbUser.name;\n            user.email = fbUser.email;\n            user.photoUrl = 'https://graph.facebook.com/' + fbUser.id + '/picture?type=normal';\n            user.firstName = fbUser.first_name;\n            user.lastName = fbUser.last_name;\n            user.authToken = authResponse.accessToken;\n            user.response = fbUser;\n            resolve(user);\n          });\n        } else {\n          reject('User cancelled login or did not fully authorize.');\n        }\n      }, options);\n    });\n  }\n\n  signOut() {\n    return new Promise((resolve, reject) => {\n      FB.logout(response => {\n        resolve();\n      });\n    });\n  }\n\n}\n\nFacebookLoginProvider.PROVIDER_ID = 'FACEBOOK';\n\nclass AmazonLoginProvider extends BaseLoginProvider {\n  constructor(clientId, initOptions = {\n    scope: 'profile',\n    scope_data: {\n      profile: {\n        essential: false\n      }\n    },\n    redirect_uri: location.origin\n  }) {\n    super();\n    this.clientId = clientId;\n    this.initOptions = initOptions;\n  }\n\n  initialize() {\n    let amazonRoot = null;\n\n    if (document) {\n      amazonRoot = document.createElement('div');\n      amazonRoot.id = 'amazon-root';\n      document.body.appendChild(amazonRoot);\n    }\n\n    window.onAmazonLoginReady = () => {\n      amazon.Login.setClientId(this.clientId);\n    };\n\n    return new Promise((resolve, reject) => {\n      try {\n        this.loadScript('amazon-login-sdk', 'https://assets.loginwithamazon.com/sdk/na/login1.js', () => {\n          resolve();\n        }, amazonRoot);\n      } catch (err) {\n        reject(err);\n      }\n    });\n  }\n\n  getLoginStatus() {\n    return new Promise((resolve, reject) => {\n      let token = this.retrieveToken();\n\n      if (token) {\n        amazon.Login.retrieveProfile(token, response => {\n          if (response.success) {\n            let user = new SocialUser();\n            user.id = response.profile.CustomerId;\n            user.name = response.profile.Name;\n            user.email = response.profile.PrimaryEmail;\n            user.response = response.profile;\n            resolve(user);\n          } else {\n            reject(response.error);\n          }\n        });\n      } else {\n        reject(`No user is currently logged in with ${AmazonLoginProvider.PROVIDER_ID}`);\n      }\n    });\n  }\n\n  signIn(signInOptions) {\n    const options = Object.assign(Object.assign({}, this.initOptions), signInOptions);\n    return new Promise((resolve, reject) => {\n      amazon.Login.authorize(options, authResponse => {\n        if (authResponse.error) {\n          reject(authResponse.error);\n        } else {\n          amazon.Login.retrieveProfile(authResponse.access_token, response => {\n            let user = new SocialUser();\n            user.id = response.profile.CustomerId;\n            user.name = response.profile.Name;\n            user.email = response.profile.PrimaryEmail;\n            user.authToken = authResponse.access_token;\n            user.response = response.profile;\n            this.persistToken(authResponse.access_token);\n            resolve(user);\n          });\n        }\n      });\n    });\n  }\n\n  signOut() {\n    return new Promise((resolve, reject) => {\n      try {\n        amazon.Login.logout();\n        this.clearToken();\n        resolve();\n      } catch (err) {\n        reject(err.message);\n      }\n    });\n  }\n\n  persistToken(token) {\n    localStorage.setItem(`${AmazonLoginProvider.PROVIDER_ID}_token`, token);\n  }\n\n  retrieveToken() {\n    return localStorage.getItem(`${AmazonLoginProvider.PROVIDER_ID}_token`);\n  }\n\n  clearToken() {\n    localStorage.removeItem(`${AmazonLoginProvider.PROVIDER_ID}_token`);\n  }\n\n}\n\nAmazonLoginProvider.PROVIDER_ID = 'AMAZON';\n\nclass VKLoginProvider extends BaseLoginProvider {\n  constructor(clientId, initOptions = {\n    fields: 'photo_max,contacts',\n    version: '5.124'\n  }) {\n    super();\n    this.clientId = clientId;\n    this.initOptions = initOptions;\n    this.VK_API_URL = '//vk.com/js/api/openapi.js';\n    this.VK_API_GET_USER = 'users.get';\n  }\n\n  initialize() {\n    return new Promise((resolve, reject) => {\n      try {\n        this.loadScript(VKLoginProvider.PROVIDER_ID, this.VK_API_URL, () => {\n          VK.init({\n            apiId: this.clientId\n          });\n          resolve();\n        });\n      } catch (err) {\n        reject(err);\n      }\n    });\n  }\n\n  getLoginStatus() {\n    return new Promise((resolve, reject) => this.getLoginStatusInternal(resolve, reject));\n  }\n\n  signIn() {\n    return new Promise((resolve, reject) => this.signInInternal(resolve, reject));\n  }\n\n  signOut() {\n    return new Promise((resolve, reject) => {\n      VK.Auth.logout(response => {\n        resolve();\n      });\n    });\n  }\n\n  signInInternal(resolve, reject) {\n    VK.Auth.login(loginResponse => {\n      if (loginResponse.status === 'connected') {\n        this.getUser(loginResponse.session.mid, loginResponse.session.sid, resolve);\n      }\n    });\n  }\n\n  getUser(userId, token, resolve) {\n    VK.Api.call(this.VK_API_GET_USER, {\n      user_id: userId,\n      fields: this.initOptions.fields,\n      v: this.initOptions.version\n    }, userResponse => {\n      resolve(this.createUser(Object.assign({}, {\n        token\n      }, userResponse.response[0])));\n    });\n  }\n\n  getLoginStatusInternal(resolve, reject) {\n    VK.Auth.getLoginStatus(loginResponse => {\n      if (loginResponse.status === 'connected') {\n        this.getUser(loginResponse.session.mid, loginResponse.session.sid, resolve);\n      }\n    });\n  }\n\n  createUser(response) {\n    const user = new SocialUser();\n    user.id = response.id;\n    user.name = `${response.first_name} ${response.last_name}`;\n    user.photoUrl = response.photo_max;\n    user.authToken = response.token;\n    return user;\n  }\n\n}\n\nVKLoginProvider.PROVIDER_ID = 'VK';\n/**\r\n * Protocol modes supported by MSAL.\r\n */\n\nvar ProtocolMode;\n\n(function (ProtocolMode) {\n  ProtocolMode[\"AAD\"] = \"AAD\";\n  ProtocolMode[\"OIDC\"] = \"OIDC\";\n})(ProtocolMode || (ProtocolMode = {}));\n\nconst COMMON_AUTHORITY = 'https://login.microsoftonline.com/common/';\n/**\r\n * Microsoft Authentication using MSAL v2: https://github.com/AzureAD/microsoft-authentication-library-for-js/tree/dev/lib/msal-browser\r\n */\n\nclass MicrosoftLoginProvider extends BaseLoginProvider {\n  constructor(clientId, initOptions) {\n    super();\n    this.clientId = clientId;\n    this.initOptions = {\n      authority: COMMON_AUTHORITY,\n      scopes: ['openid', 'email', 'profile', 'User.Read'],\n      knownAuthorities: [],\n      protocolMode: ProtocolMode.AAD,\n      clientCapabilities: [],\n      cacheLocation: 'sessionStorage'\n    };\n    this.initOptions = Object.assign(Object.assign({}, this.initOptions), initOptions);\n  }\n\n  initialize() {\n    return new Promise((resolve, reject) => {\n      this.loadScript(MicrosoftLoginProvider.PROVIDER_ID, 'https://alcdn.msauth.net/browser/2.13.1/js/msal-browser.min.js', () => {\n        var _a;\n\n        try {\n          const config = {\n            auth: {\n              clientId: this.clientId,\n              redirectUri: (_a = this.initOptions.redirect_uri) !== null && _a !== void 0 ? _a : location.origin,\n              authority: this.initOptions.authority,\n              knownAuthorities: this.initOptions.knownAuthorities,\n              protocolMode: this.initOptions.protocolMode,\n              clientCapabilities: this.initOptions.clientCapabilities\n            },\n            cache: !this.initOptions.cacheLocation ? null : {\n              cacheLocation: this.initOptions.cacheLocation\n            }\n          };\n          this._instance = new msal.PublicClientApplication(config);\n          resolve();\n        } catch (e) {\n          reject(e);\n        }\n      });\n    });\n  }\n\n  getSocialUser(loginResponse) {\n    return new Promise((resolve, reject) => {\n      //After login, use Microsoft Graph API to get user info\n      let meRequest = new XMLHttpRequest();\n\n      meRequest.onreadystatechange = () => {\n        if (meRequest.readyState == 4) {\n          try {\n            if (meRequest.status == 200) {\n              let userInfo = JSON.parse(meRequest.responseText);\n              let user = new SocialUser();\n              user.provider = MicrosoftLoginProvider.PROVIDER_ID;\n              user.id = loginResponse.idToken;\n              user.authToken = loginResponse.accessToken;\n              user.name = loginResponse.idTokenClaims.name;\n              user.email = loginResponse.account.username;\n              user.idToken = loginResponse.idToken;\n              user.response = loginResponse;\n              user.firstName = userInfo.givenName;\n              user.lastName = userInfo.surname;\n              resolve(user);\n            } else {\n              reject(`Error retrieving user info: ${meRequest.status}`);\n            }\n          } catch (err) {\n            reject(err);\n          }\n        }\n      }; //Microsoft Graph ME Endpoint: https://docs.microsoft.com/en-us/graph/api/user-get?view=graph-rest-1.0&tabs=http\n\n\n      meRequest.open('GET', 'https://graph.microsoft.com/v1.0/me');\n      meRequest.setRequestHeader('Authorization', `Bearer ${loginResponse.accessToken}`);\n\n      try {\n        meRequest.send();\n      } catch (err) {\n        reject(err);\n      }\n    });\n  }\n\n  getLoginStatus() {\n    return __awaiter(this, void 0, void 0, function* () {\n      const accounts = this._instance.getAllAccounts();\n\n      if ((accounts === null || accounts === void 0 ? void 0 : accounts.length) > 0) {\n        const loginResponse = yield this._instance.ssoSilent({\n          scopes: this.initOptions.scopes,\n          loginHint: accounts[0].username\n        });\n        return yield this.getSocialUser(loginResponse);\n      } else {\n        throw `No user is currently logged in with ${MicrosoftLoginProvider.PROVIDER_ID}`;\n      }\n    });\n  }\n\n  signIn() {\n    return __awaiter(this, void 0, void 0, function* () {\n      const loginResponse = yield this._instance.loginPopup({\n        scopes: this.initOptions.scopes,\n        prompt: this.initOptions.prompt\n      });\n      return yield this.getSocialUser(loginResponse);\n    });\n  }\n\n  signOut(revoke) {\n    var _a, _b;\n\n    return __awaiter(this, void 0, void 0, function* () {\n      const accounts = this._instance.getAllAccounts();\n\n      if ((accounts === null || accounts === void 0 ? void 0 : accounts.length) > 0) {\n        yield this._instance.logoutPopup({\n          account: accounts[0],\n          postLogoutRedirectUri: (_b = (_a = this.initOptions.logout_redirect_uri) !== null && _a !== void 0 ? _a : this.initOptions.redirect_uri) !== null && _b !== void 0 ? _b : location.href\n        });\n      }\n    });\n  }\n\n}\n\nMicrosoftLoginProvider.PROVIDER_ID = 'MICROSOFT';\n/**\r\n * Generated bundle index. Do not edit.\r\n */\n\nexport { AmazonLoginProvider, BaseLoginProvider, DummyLoginProvider, FacebookLoginProvider, GoogleLoginProvider, GoogleSigninButtonDirective, MicrosoftLoginProvider, SocialAuthService, SocialLoginModule, SocialUser, VKLoginProvider };","map":{"version":3,"sources":["../../../projects/lib/src/entities/base-login-provider.ts","../../../projects/lib/src/entities/social-user.ts","../../../projects/lib/src/providers/google-login-provider.ts","../../../projects/lib/src/socialauth.service.ts","../../../projects/lib/src/directives/google-signin-button.directive.ts","../../../projects/lib/src/sociallogin.module.ts","../../../projects/lib/src/providers/dummy-login-provider.ts","../../../projects/lib/src/providers/facebook-login-provider.ts","../../../projects/lib/src/providers/amazon-login-provider.ts","../../../projects/lib/src/providers/vk-login-provider.ts","../../../projects/lib/src/providers/microsoft-login-provider.ts","../../../projects/lib/src/abacritt-angularx-social-login.ts"],"names":[],"mappings":"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","sourcesContent":["import { EventEmitter } from '@angular/core';\r\nimport { LoginProvider } from './login-provider';\r\nimport { SocialUser } from './social-user';\r\n\r\nexport abstract class BaseLoginProvider implements LoginProvider {\r\n  constructor() {}\r\n  readonly changeUser?: EventEmitter<SocialUser>;\r\n  abstract initialize(autoLogin?: boolean): Promise<void>;\r\n  abstract getLoginStatus(): Promise<SocialUser>;\r\n  abstract signIn(signInOptions?: object): Promise<SocialUser>;\r\n  abstract signOut(revoke?: boolean): Promise<void>;\r\n  refreshToken?(): Promise<SocialUser | null>;\r\n\r\n  protected loadScript(\r\n    id: string,\r\n    src: string,\r\n    onload: any,\r\n    parentElement = null\r\n  ): void {\r\n    // get document if platform is only browser\r\n    if (typeof document !== 'undefined' && !document.getElementById(id)) {\r\n      let signInJS = document.createElement('script');\r\n\r\n      signInJS.async = true;\r\n      signInJS.src = src;\r\n      signInJS.onload = onload;\r\n\r\n      if (!parentElement) {\r\n        parentElement = document.head;\r\n      }\r\n\r\n      parentElement.appendChild(signInJS);\r\n    }\r\n  }\r\n}\r\n","export class SocialUser {\r\n  provider: string;\r\n  id: string;\r\n  email: string;\r\n  name: string;\r\n  photoUrl: string;\r\n  firstName: string;\r\n  lastName: string;\r\n  authToken: string;\r\n\r\n  idToken: string; // Reference https://developers.google.com/identity/sign-in/web/backend-auth\r\n  authorizationCode: string; // Reference https://developers.google.com/identity/sign-in/web/reference#googleauthgrantofflineaccessoptions\r\n\r\n  response: any;\r\n}\r\n","import { BaseLoginProvider } from '../entities/base-login-provider';\r\nimport { SocialUser } from '../entities/social-user';\r\nimport { EventEmitter } from '@angular/core';\r\nimport { BehaviorSubject, filter, skip, take } from 'rxjs';\r\n\r\nexport interface GoogleInitOptions {\r\n  /**\r\n   * enables the One Tap mechanism, and makes auto-login possible\r\n   */\r\n  oneTapEnabled?: boolean;\r\n  /**\r\n   * list of permission scopes to grant in case we request an access token\r\n   */\r\n  scopes?: string | string[];\r\n /**\r\n   * This attribute sets the DOM ID of the container element. If it's not set, the One Tap prompt is displayed in the top-right corner of the window.\r\n   */\r\n  prompt_parent_id?: string;\r\n\r\n  /**\r\n   * Optional, defaults to 'select_account'.\r\n   * A space-delimited, case-sensitive list of prompts to present the\r\n   * user.\r\n   * Possible values are:\r\n   * empty string The user will be prompted only the first time your\r\n   *     app requests access. Cannot be specified with other values.\r\n   * 'none' Do not display any authentication or consent screens. Must\r\n   *     not be specified with other values.\r\n   * 'consent' Prompt the user for consent.\r\n   * 'select_account' Prompt the user to select an account.\r\n   */\r\n  prompt? : '' | 'none' | 'consent' | 'select_account';\r\n}\r\n\r\nconst defaultInitOptions: GoogleInitOptions = {\r\n  oneTapEnabled: true,\r\n};\r\n\r\nexport class GoogleLoginProvider extends BaseLoginProvider {\r\n  public static readonly PROVIDER_ID: string = 'GOOGLE';\r\n\r\n  public readonly changeUser = new EventEmitter<SocialUser | null>();\r\n\r\n  private readonly _socialUser = new BehaviorSubject<SocialUser | null>(null);\r\n  private readonly _accessToken = new BehaviorSubject<string | null>(null);\r\n  private readonly _receivedAccessToken = new EventEmitter<string>();\r\n  private _tokenClient: google.accounts.oauth2.TokenClient | undefined;\r\n\r\n  constructor(\r\n    private clientId: string,\r\n    private readonly initOptions?: GoogleInitOptions\r\n  ) {\r\n    super();\r\n\r\n    this.initOptions = { ...defaultInitOptions, ...this.initOptions };\r\n\r\n    // emit changeUser events but skip initial value from behaviorSubject\r\n    this._socialUser.pipe(skip(1)).subscribe(this.changeUser);\r\n\r\n    // emit receivedAccessToken but skip initial value from behaviorSubject\r\n    this._accessToken.pipe(skip(1)).subscribe(this._receivedAccessToken);\r\n  }\r\n\r\n  initialize(autoLogin?: boolean): Promise<void> {\r\n    return new Promise((resolve, reject) => {\r\n      try {\r\n        this.loadScript(\r\n          GoogleLoginProvider.PROVIDER_ID,\r\n          'https://accounts.google.com/gsi/client',\r\n          () => {\r\n            google.accounts.id.initialize({\r\n              client_id: this.clientId,\r\n              auto_select: autoLogin,\r\n              callback: ({ credential }) => {\r\n                const socialUser = this.createSocialUser(credential);\r\n                this._socialUser.next(socialUser);\r\n              },\r\n              prompt_parent_id: this.initOptions?.prompt_parent_id,\r\n              itp_support: this.initOptions.oneTapEnabled\r\n            });\r\n\r\n            if (this.initOptions.oneTapEnabled) {\r\n              this._socialUser\r\n                .pipe(filter((user) => user === null))\r\n                .subscribe(() => google.accounts.id.prompt(console.debug));\r\n            }\r\n\r\n            if (this.initOptions.scopes) {\r\n              const scope =\r\n                this.initOptions.scopes instanceof Array\r\n                  ? this.initOptions.scopes.filter((s) => s).join(' ')\r\n                  : this.initOptions.scopes;\r\n\r\n              this._tokenClient = google.accounts.oauth2.initTokenClient({\r\n                client_id: this.clientId,\r\n                scope,\r\n                prompt : this.initOptions.prompt,\r\n                callback: (tokenResponse) => {\r\n                  if (tokenResponse.error) {\r\n                    this._accessToken.error({\r\n                      code: tokenResponse.error,\r\n                      description: tokenResponse.error_description,\r\n                      uri: tokenResponse.error_uri,\r\n                    });\r\n                  } else {\r\n                    this._accessToken.next(tokenResponse.access_token);\r\n                  }\r\n                },\r\n              });\r\n            }\r\n\r\n            resolve();\r\n          }\r\n        );\r\n      } catch (err) {\r\n        reject(err);\r\n      }\r\n    });\r\n  }\r\n\r\n  getLoginStatus(): Promise<SocialUser> {\r\n    return new Promise((resolve, reject) => {\r\n      if (this._socialUser.value) {\r\n        resolve(this._socialUser.value);\r\n      } else {\r\n        reject(\r\n          `No user is currently logged in with ${GoogleLoginProvider.PROVIDER_ID}`\r\n        );\r\n      }\r\n    });\r\n  }\r\n\r\n  refreshToken(): Promise<SocialUser | null> {\r\n    return new Promise((resolve, reject) => {\r\n      google.accounts.id.revoke(this._socialUser.value.id, (response) => {\r\n        if (response.error) reject(response.error);\r\n        else resolve(this._socialUser.value);\r\n      });\r\n    });\r\n  }\r\n\r\n  getAccessToken(): Promise<string> {\r\n    return new Promise((resolve, reject) => {\r\n      if (!this._tokenClient) {\r\n        if (this._socialUser.value) {\r\n          reject(\r\n            'No token client was instantiated, you should specify some scopes.'\r\n          );\r\n        } else {\r\n          reject('You should be logged-in first.');\r\n        }\r\n      } else {\r\n        this._tokenClient.requestAccessToken({\r\n          hint: this._socialUser.value?.email,\r\n        });\r\n        this._receivedAccessToken.pipe(take(1)).subscribe(resolve);\r\n      }\r\n    });\r\n  }\r\n\r\n  revokeAccessToken(): Promise<void> {\r\n    return new Promise((resolve, reject) => {\r\n      if (!this._tokenClient) {\r\n        reject(\r\n          'No token client was instantiated, you should specify some scopes.'\r\n        );\r\n      } else if (!this._accessToken.value) {\r\n        reject('No access token to revoke');\r\n      } else {\r\n        google.accounts.oauth2.revoke(this._accessToken.value, () => {\r\n          this._accessToken.next(null);\r\n          resolve();\r\n        });\r\n      }\r\n    });\r\n  }\r\n\r\n  signIn(): Promise<SocialUser> {\r\n    return Promise.reject(\r\n      'You should not call this method directly for Google, use \"<asl-google-signin-button>\" wrapper ' +\r\n        'or generate the button yourself with \"google.accounts.id.renderButton()\" ' +\r\n        '(https://developers.google.com/identity/gsi/web/guides/display-button#javascript)'\r\n    );\r\n  }\r\n\r\n  async signOut(): Promise<void> {\r\n    google.accounts.id.disableAutoSelect();\r\n    this._socialUser.next(null);\r\n  }\r\n\r\n  private createSocialUser(idToken: string) {\r\n    const user = new SocialUser();\r\n    user.idToken = idToken;\r\n    const payload = this.decodeJwt(idToken);\r\n    user.id = payload.sub;\r\n    user.name = payload.name;\r\n    user.email = payload.email;\r\n    user.photoUrl = payload.picture;\r\n    user.firstName = payload['given_name'];\r\n    user.lastName = payload['family_name'];\r\n    return user;\r\n  }\r\n\r\n  private decodeJwt(idToken: string): Record<string, string | undefined> {\r\n    const base64Url = idToken.split(\".\")[1];\r\n    const base64 = base64Url.replace(/-/g, \"+\").replace(/_/g, \"/\");\r\n    const jsonPayload = decodeURIComponent(\r\n      window.atob(base64)\r\n        .split(\"\")\r\n        .map(function (c) {\r\n          return \"%\" + (\"00\" + c.charCodeAt(0).toString(16)).slice(-2);\r\n        })\r\n        .join(\"\")\r\n    );\r\n    return JSON.parse(jsonPayload);\r\n  }\r\n}\r\n","import { Inject, Injectable, Injector, NgZone, Type } from '@angular/core';\r\nimport { AsyncSubject, isObservable, Observable, ReplaySubject } from 'rxjs';\r\nimport { LoginProvider } from './entities/login-provider';\r\nimport { SocialUser } from './entities/social-user';\r\nimport { GoogleLoginProvider } from './providers/google-login-provider';\r\n\r\n/**\r\n * An interface to define the shape of the service configuration options.\r\n */\r\nexport interface SocialAuthServiceConfig {\r\n  autoLogin?: boolean;\r\n  providers: { id: string; provider: LoginProvider | Type<LoginProvider> }[];\r\n  onError?: (error: any) => any;\r\n}\r\n\r\n/**\r\n * The service encapsulating the social login functionality. Exposes methods like\r\n * `signIn`, `signOut`. Also, exposes an `authState` `Observable` that one can\r\n * subscribe to get the current logged in user information.\r\n *\r\n * @dynamic\r\n */\r\n@Injectable({ providedIn: 'root' })\r\nexport class SocialAuthService {\r\n  private static readonly ERR_LOGIN_PROVIDER_NOT_FOUND =\r\n    'Login provider not found';\r\n  private static readonly ERR_NOT_LOGGED_IN = 'Not logged in';\r\n  private static readonly ERR_NOT_INITIALIZED =\r\n    'Login providers not ready yet. Are there errors on your console?';\r\n  private static readonly ERR_NOT_SUPPORTED_FOR_REFRESH_TOKEN =\r\n    'Chosen login provider is not supported for refreshing a token';\r\n  private static readonly ERR_NOT_SUPPORTED_FOR_ACCESS_TOKEN =\r\n    'Chosen login provider is not supported for getting an access token';\r\n\r\n  private providers: Map<string, LoginProvider> = new Map();\r\n  private autoLogin = false;\r\n\r\n  private _user: SocialUser | null = null;\r\n  private _authState: ReplaySubject<SocialUser | null> = new ReplaySubject(1);\r\n\r\n  /* Consider making this an enum comprising LOADING, LOADED, FAILED etc. */\r\n  private initialized = false;\r\n  private _initState: AsyncSubject<boolean> = new AsyncSubject();\r\n\r\n  /** An `Observable` that one can subscribe to get the current logged in user information */\r\n  get authState(): Observable<SocialUser> {\r\n    return this._authState.asObservable();\r\n  }\r\n\r\n  /** An `Observable` to communicate the readiness of the service and associated login providers */\r\n  get initState(): Observable<boolean> {\r\n    return this._initState.asObservable();\r\n  }\r\n\r\n  /**\r\n   * @param config A `SocialAuthServiceConfig` object or a `Promise` that resolves to a `SocialAuthServiceConfig` object\r\n   */\r\n  constructor(\r\n    @Inject('SocialAuthServiceConfig')\r\n    config: SocialAuthServiceConfig | Promise<SocialAuthServiceConfig>,\r\n    private readonly _ngZone: NgZone,\r\n    private readonly _injector: Injector\r\n  ) {\r\n    if (config instanceof Promise) {\r\n      config.then((config: SocialAuthServiceConfig) => {\r\n        this.initialize(config);\r\n      });\r\n    } else {\r\n      this.initialize(config);\r\n    }\r\n  }\r\n\r\n  private initialize(config: SocialAuthServiceConfig) {\r\n    this.autoLogin = config.autoLogin !== undefined ? config.autoLogin : false;\r\n    const { onError = console.error } = config;\r\n\r\n    config.providers.forEach((item) => {\r\n      this.providers.set(\r\n        item.id,\r\n        'prototype' in item.provider\r\n          ? this._injector.get(item.provider)\r\n          : item.provider\r\n      );\r\n    });\r\n\r\n    Promise.all(\r\n      Array.from(this.providers.values()).map((provider) =>\r\n        provider.initialize(this.autoLogin)\r\n      )\r\n    )\r\n      .then(() => {\r\n        if (this.autoLogin) {\r\n          const loginStatusPromises = [];\r\n          let loggedIn = false;\r\n\r\n          this.providers.forEach((provider: LoginProvider, key: string) => {\r\n            const promise = provider.getLoginStatus();\r\n            loginStatusPromises.push(promise);\r\n            promise\r\n              .then((user: SocialUser) => {\r\n                this.setUser(user, key);\r\n                loggedIn = true;\r\n              })\r\n              .catch(console.debug);\r\n          });\r\n          Promise.all(loginStatusPromises).catch(() => {\r\n            if (!loggedIn) {\r\n              this._user = null;\r\n              this._authState.next(null);\r\n            }\r\n          });\r\n        }\r\n\r\n        this.providers.forEach((provider, key) => {\r\n          if (isObservable(provider.changeUser)) {\r\n            provider.changeUser.subscribe((user) => {\r\n              this._ngZone.run(() => {\r\n                this.setUser(user, key);\r\n              });\r\n            });\r\n          }\r\n        });\r\n      })\r\n      .catch((error) => {\r\n        onError(error);\r\n      })\r\n      .finally(() => {\r\n        this.initialized = true;\r\n        this._initState.next(this.initialized);\r\n        this._initState.complete();\r\n      });\r\n  }\r\n\r\n  async getAccessToken(providerId: string): Promise<string> {\r\n    const providerObject = this.providers.get(providerId);\r\n    if (!this.initialized) {\r\n      throw SocialAuthService.ERR_NOT_INITIALIZED;\r\n    } else if (!providerObject) {\r\n      throw SocialAuthService.ERR_LOGIN_PROVIDER_NOT_FOUND;\r\n    } else if (!(providerObject instanceof GoogleLoginProvider)) {\r\n      throw SocialAuthService.ERR_NOT_SUPPORTED_FOR_ACCESS_TOKEN;\r\n    }\r\n\r\n    return await providerObject.getAccessToken();\r\n  }\r\n\r\n  refreshAuthToken(providerId: string): Promise<void> {\r\n    return new Promise((resolve, reject) => {\r\n      if (!this.initialized) {\r\n        reject(SocialAuthService.ERR_NOT_INITIALIZED);\r\n      } else {\r\n        const providerObject = this.providers.get(providerId);\r\n        if (providerObject) {\r\n          if (typeof providerObject.refreshToken !== 'function') {\r\n            reject(SocialAuthService.ERR_NOT_SUPPORTED_FOR_REFRESH_TOKEN);\r\n          } else {\r\n            providerObject\r\n              .refreshToken()\r\n              .then((user) => {\r\n                this.setUser(user, providerId);\r\n                resolve();\r\n              })\r\n              .catch((err) => {\r\n                reject(err);\r\n              });\r\n          }\r\n        } else {\r\n          reject(SocialAuthService.ERR_LOGIN_PROVIDER_NOT_FOUND);\r\n        }\r\n      }\r\n    });\r\n  }\r\n\r\n  refreshAccessToken(providerId: string): Promise<void> {\r\n    return new Promise((resolve, reject) => {\r\n      if (!this.initialized) {\r\n        reject(SocialAuthService.ERR_NOT_INITIALIZED);\r\n      } else if (providerId !== GoogleLoginProvider.PROVIDER_ID) {\r\n        reject(SocialAuthService.ERR_NOT_SUPPORTED_FOR_REFRESH_TOKEN);\r\n      } else {\r\n        const providerObject = this.providers.get(providerId);\r\n        if (providerObject instanceof GoogleLoginProvider) {\r\n          providerObject.revokeAccessToken().then(resolve).catch(reject);\r\n        } else {\r\n          reject(SocialAuthService.ERR_LOGIN_PROVIDER_NOT_FOUND);\r\n        }\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * A method used to sign in a user with a specific `LoginProvider`.\r\n   *\r\n   * @param providerId Id with which the `LoginProvider` has been registered with the service\r\n   * @param signInOptions Optional `LoginProvider` specific arguments\r\n   * @returns A `Promise` that resolves to the authenticated user information\r\n   */\r\n  signIn(providerId: string, signInOptions?: any): Promise<SocialUser> {\r\n    return new Promise((resolve, reject) => {\r\n      if (!this.initialized) {\r\n        reject(SocialAuthService.ERR_NOT_INITIALIZED);\r\n      } else {\r\n        let providerObject = this.providers.get(providerId);\r\n        if (providerObject) {\r\n          providerObject\r\n            .signIn(signInOptions)\r\n            .then((user: SocialUser) => {\r\n              this.setUser(user, providerId);\r\n              resolve(user);\r\n            })\r\n            .catch((err) => {\r\n              reject(err);\r\n            });\r\n        } else {\r\n          reject(SocialAuthService.ERR_LOGIN_PROVIDER_NOT_FOUND);\r\n        }\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * A method used to sign out the currently loggen in user.\r\n   *\r\n   * @param revoke Optional parameter to specify whether a hard sign out is to be performed\r\n   * @returns A `Promise` that resolves if the operation is successful, rejects otherwise\r\n   */\r\n  signOut(revoke: boolean = false): Promise<void> {\r\n    return new Promise((resolve, reject) => {\r\n      if (!this.initialized) {\r\n        reject(SocialAuthService.ERR_NOT_INITIALIZED);\r\n      } else if (!this._user) {\r\n        reject(SocialAuthService.ERR_NOT_LOGGED_IN);\r\n      } else {\r\n        let providerId = this._user.provider;\r\n        let providerObject = this.providers.get(providerId);\r\n        if (providerObject) {\r\n          providerObject\r\n            .signOut(revoke)\r\n            .then(() => {\r\n              resolve();\r\n              this.setUser(null);\r\n            })\r\n            .catch((err) => {\r\n              reject(err);\r\n            });\r\n        } else {\r\n          reject(SocialAuthService.ERR_LOGIN_PROVIDER_NOT_FOUND);\r\n        }\r\n      }\r\n    });\r\n  }\r\n\r\n  private setUser(user: SocialUser | null, id?: string) {\r\n    if (user && id) user.provider = id;\r\n    this._user = user;\r\n    this._authState.next(user);\r\n  }\r\n}\r\n","import { Directive, ElementRef, Input } from '@angular/core';\r\nimport { take } from 'rxjs';\r\nimport { SocialAuthService } from '../socialauth.service';\r\n\r\n@Directive({\r\n  // eslint-disable-next-line @angular-eslint/directive-selector\r\n  selector: 'asl-google-signin-button',\r\n})\r\nexport class GoogleSigninButtonDirective {\r\n  @Input()\r\n  type: 'icon' | 'standard' = 'icon';\r\n\r\n  @Input()\r\n  size: 'small' | 'medium' | 'large' = 'medium';\r\n\r\n  @Input()\r\n  text: 'signin_with' | 'signup_with' | 'continue_with' = 'signin_with';\r\n\r\n  @Input()\r\n  shape: 'square' | 'circle' | 'pill' | 'rectangular' = 'rectangular';\r\n\r\n  @Input()\r\n  theme: 'outline' | 'filled_blue' | 'filled_black' = 'outline';\r\n\r\n  @Input()\r\n  logo_alignment: 'left' | 'center' = 'left';\r\n\r\n  @Input()\r\n  width: string = '';\r\n\r\n  @Input()\r\n  locale: string = '';\r\n\r\n  constructor(el: ElementRef, socialAuthService: SocialAuthService) {\r\n    socialAuthService.initState.pipe(take(1)).subscribe(() => {\r\n      Promise.resolve(this.width).then((value) => {\r\n        if (value > '400' || (value < '200' && value != '')) {\r\n          Promise.reject(\r\n            'Please note .. max-width 400 , min-width 200 ' +\r\n              '(https://developers.google.com/identity/gsi/web/tools/configurator)'\r\n          );\r\n        } else {\r\n          google.accounts.id.renderButton(el.nativeElement, {\r\n            type: this.type,\r\n            size: this.size,\r\n            text: this.text,\r\n            width: this.width,\r\n            shape: this.shape,\r\n            theme: this.theme,\r\n            logo_alignment: this.logo_alignment,\r\n            locale: this.locale,\r\n          });\r\n        }\r\n      });\r\n    });\r\n  }\r\n}\r\n","import {\r\n  NgModule,\r\n  Optional,\r\n  SkipSelf,\r\n  ModuleWithProviders\r\n} from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\n\r\nimport { SocialAuthService, SocialAuthServiceConfig } from './socialauth.service';\r\nimport { GoogleSigninButtonDirective } from './directives/google-signin-button.directive';\r\n\r\n/**\r\n * The main module of angularx-social-login library.\r\n */\r\n@NgModule({\r\n  declarations: [GoogleSigninButtonDirective],\r\n  imports: [\r\n    CommonModule\r\n  ],\r\n  providers: [\r\n    SocialAuthService\r\n  ],\r\n  exports: [GoogleSigninButtonDirective]\r\n})\r\nexport class SocialLoginModule {\r\n  public static initialize(config: SocialAuthServiceConfig): ModuleWithProviders<SocialLoginModule> {\r\n    return {\r\n      ngModule: SocialLoginModule,\r\n      providers: [\r\n        SocialAuthService,\r\n        {\r\n          provide: 'SocialAuthServiceConfig',\r\n          useValue: config\r\n        }\r\n      ]\r\n    };\r\n  }\r\n\r\n  constructor(@Optional() @SkipSelf() parentModule: SocialLoginModule) {\r\n    if (parentModule) {\r\n      throw new Error(\r\n        'SocialLoginModule is already loaded. Import it in the AppModule only');\r\n    }\r\n  }\r\n}\r\n","import { BaseLoginProvider } from '../entities/base-login-provider';\r\nimport { SocialUser } from '../entities/social-user';\r\n\r\n// Simulates login / logout without actually requiring an Internet connection.\r\n//\r\n// Useful for certain development situations.\r\n//\r\n// For example, if you want to simulate the greatest football referee England has ever produced:\r\n//\r\n//  const dummyUser: SocialUser = {\r\n//     id: '0123456789',\r\n//     name: 'Howard Webb',\r\n//     email: 'howard@webb.com',\r\n//     firstName: 'Howard',\r\n//     lastName: 'Webb',\r\n//     authToken: 'dummyAuthToken',\r\n//     photoUrl: 'https://en.wikipedia.org/wiki/Howard_Webb#/media/File:Howard_Webb_march11.jpg',\r\n//     provider: 'DUMMY',\r\n//     idToken: 'dummyIdToken',\r\n//     authorizationCode: 'dummyAuthCode'\r\n// };\r\n//\r\n//  let config = new AuthServiceConfig([\r\n//  { ... },\r\n//  {\r\n//       id: DummyLoginProvider.PROVIDER_ID,\r\n//       provider: new DummyLoginProvider(dummyUser)  // Pass your user into the constructor\r\n//   },\r\n//  { ... }\r\n//  ]);\r\n\r\nexport class DummyLoginProvider extends BaseLoginProvider {\r\n  public static readonly PROVIDER_ID: string = 'DUMMY';\r\n\r\n  static readonly DEFAULT_USER = {\r\n    id: '1234567890',\r\n    name: 'Mickey Mouse',\r\n    email: 'mickey@mouse.com',\r\n    firstName: 'Mickey',\r\n    lastName: 'Mouse',\r\n    authToken: 'dummyAuthToken',\r\n    photoUrl: 'https://en.wikipedia.org/wiki/File:Mickey_Mouse.png',\r\n    provider: 'DUMMY',\r\n    idToken: 'dummyIdToken',\r\n    authorizationCode: 'dummyAuthCode',\r\n    response: {},\r\n  };\r\n\r\n  private dummy: SocialUser;\r\n\r\n  private loggedIn: boolean;\r\n\r\n  constructor(dummy?: SocialUser) {\r\n    super();\r\n    if (dummy) {\r\n      this.dummy = dummy;\r\n    } else {\r\n      this.dummy = DummyLoginProvider.DEFAULT_USER;\r\n    }\r\n\r\n    // Start not logged in\r\n    this.loggedIn = false;\r\n  }\r\n\r\n  getLoginStatus(): Promise<SocialUser> {\r\n    return new Promise((resolve, reject) => {\r\n      if (this.loggedIn) {\r\n        resolve(this.dummy);\r\n      } else {\r\n        reject('No user is currently logged in.');\r\n      }\r\n    });\r\n  }\r\n\r\n  initialize(): Promise<void> {\r\n    return new Promise((resolve, reject) => {\r\n      resolve();\r\n    });\r\n  }\r\n\r\n  signIn(): Promise<SocialUser> {\r\n    return new Promise((resolve, reject) => {\r\n      this.loggedIn = true;\r\n      resolve(this.dummy);\r\n    });\r\n  }\r\n\r\n  signOut(revoke?: boolean): Promise<void> {\r\n    return new Promise((resolve, reject) => {\r\n      this.loggedIn = false;\r\n      resolve();\r\n    });\r\n  }\r\n}\r\n","import { BaseLoginProvider } from '../entities/base-login-provider';\r\nimport { SocialUser } from '../entities/social-user';\r\n\r\ndeclare let FB: any;\r\n\r\nexport class FacebookLoginProvider extends BaseLoginProvider {\r\n  public static readonly PROVIDER_ID: string = 'FACEBOOK';\r\n\r\n  private requestOptions = {\r\n    scope: 'email,public_profile',\r\n    locale: 'en_US',\r\n    fields: 'name,email,picture,first_name,last_name',\r\n    version: 'v10.0',\r\n  };\r\n\r\n  constructor(private clientId: string, initOptions: Object = {}) {\r\n    super();\r\n\r\n    this.requestOptions = {\r\n      ...this.requestOptions,\r\n      ...initOptions,\r\n    };\r\n  }\r\n\r\n  initialize(): Promise<void> {\r\n    return new Promise((resolve, reject) => {\r\n      try {\r\n        this.loadScript(\r\n          FacebookLoginProvider.PROVIDER_ID,\r\n          `//connect.facebook.net/${this.requestOptions.locale}/sdk.js`,\r\n          () => {\r\n            FB.init({\r\n              appId: this.clientId,\r\n              autoLogAppEvents: true,\r\n              cookie: true,\r\n              xfbml: true,\r\n              version: this.requestOptions.version,\r\n            });\r\n\r\n            resolve();\r\n          }\r\n        );\r\n      } catch (err) {\r\n        reject(err);\r\n      }\r\n    });\r\n  }\r\n\r\n  getLoginStatus(): Promise<SocialUser> {\r\n    return new Promise((resolve, reject) => {\r\n      FB.getLoginStatus((response: any) => {\r\n        if (response.status === 'connected') {\r\n          let authResponse = response.authResponse;\r\n          FB.api(`/me?fields=${this.requestOptions.fields}`, (fbUser: any) => {\r\n            let user: SocialUser = new SocialUser();\r\n\r\n            user.id = fbUser.id;\r\n            user.name = fbUser.name;\r\n            user.email = fbUser.email;\r\n            user.photoUrl =\r\n              'https://graph.facebook.com/' +\r\n              fbUser.id +\r\n              '/picture?type=normal&access_token=' +\r\n              authResponse.accessToken;\r\n            user.firstName = fbUser.first_name;\r\n            user.lastName = fbUser.last_name;\r\n            user.authToken = authResponse.accessToken;\r\n\r\n            user.response = fbUser;\r\n\r\n            resolve(user);\r\n          });\r\n        } else {\r\n          reject(\r\n            `No user is currently logged in with ${FacebookLoginProvider.PROVIDER_ID}`\r\n          );\r\n        }\r\n      });\r\n    });\r\n  }\r\n\r\n  signIn(signInOptions?: any): Promise<SocialUser> {\r\n    const options = { ...this.requestOptions, ...signInOptions };\r\n    return new Promise((resolve, reject) => {\r\n      FB.login((response: any) => {\r\n        if (response.authResponse) {\r\n          let authResponse = response.authResponse;\r\n          FB.api(`/me?fields=${options.fields}`, (fbUser: any) => {\r\n            let user: SocialUser = new SocialUser();\r\n\r\n            user.id = fbUser.id;\r\n            user.name = fbUser.name;\r\n            user.email = fbUser.email;\r\n            user.photoUrl =\r\n              'https://graph.facebook.com/' +\r\n              fbUser.id +\r\n              '/picture?type=normal';\r\n            user.firstName = fbUser.first_name;\r\n            user.lastName = fbUser.last_name;\r\n            user.authToken = authResponse.accessToken;\r\n\r\n            user.response = fbUser;\r\n\r\n            resolve(user);\r\n          });\r\n        } else {\r\n          reject('User cancelled login or did not fully authorize.');\r\n        }\r\n      }, options);\r\n    });\r\n  }\r\n\r\n  signOut(): Promise<void> {\r\n    return new Promise((resolve, reject) => {\r\n      FB.logout((response: any) => {\r\n        resolve();\r\n      });\r\n    });\r\n  }\r\n}\r\n","import { BaseLoginProvider } from '../entities/base-login-provider';\r\nimport { SocialUser } from '../entities/social-user';\r\n\r\ndeclare let amazon: any, window: any;\r\n\r\nexport class AmazonLoginProvider extends BaseLoginProvider {\r\n  public static readonly PROVIDER_ID: string = 'AMAZON';\r\n\r\n  constructor(\r\n    private clientId: string,\r\n    private initOptions: any = {\r\n      scope: 'profile',\r\n      scope_data: {\r\n        profile: { essential: false },\r\n      },\r\n      redirect_uri: location.origin,\r\n    }\r\n  ) {\r\n    super();\r\n  }\r\n\r\n  initialize(): Promise<void> {\r\n    let amazonRoot = null;\r\n    if (document) {\r\n      amazonRoot = document.createElement('div');\r\n      amazonRoot.id = 'amazon-root';\r\n      document.body.appendChild(amazonRoot);\r\n    }\r\n\r\n    window.onAmazonLoginReady = () => {\r\n      amazon.Login.setClientId(this.clientId);\r\n    };\r\n\r\n    return new Promise((resolve, reject) => {\r\n      try {\r\n        this.loadScript(\r\n          'amazon-login-sdk',\r\n          'https://assets.loginwithamazon.com/sdk/na/login1.js',\r\n          () => {\r\n            resolve();\r\n          },\r\n          amazonRoot\r\n        );\r\n      } catch (err) {\r\n        reject(err);\r\n      }\r\n    });\r\n  }\r\n\r\n  getLoginStatus(): Promise<SocialUser> {\r\n    return new Promise((resolve, reject) => {\r\n      let token = this.retrieveToken();\r\n\r\n      if (token) {\r\n        amazon.Login.retrieveProfile(token, (response) => {\r\n          if (response.success) {\r\n            let user: SocialUser = new SocialUser();\r\n\r\n            user.id = response.profile.CustomerId;\r\n            user.name = response.profile.Name;\r\n            user.email = response.profile.PrimaryEmail;\r\n            user.response = response.profile;\r\n\r\n            resolve(user);\r\n          } else {\r\n            reject(response.error);\r\n          }\r\n        });\r\n      } else {\r\n        reject(`No user is currently logged in with ${AmazonLoginProvider.PROVIDER_ID}`);\r\n      }\r\n    });\r\n  }\r\n\r\n  signIn(signInOptions?: any): Promise<SocialUser> {\r\n    const options = { ...this.initOptions, ...signInOptions };\r\n    return new Promise((resolve, reject) => {\r\n      amazon.Login.authorize(options, (authResponse) => {\r\n        if (authResponse.error) {\r\n          reject(authResponse.error);\r\n        } else {\r\n          amazon.Login.retrieveProfile(\r\n            authResponse.access_token,\r\n            (response) => {\r\n              let user: SocialUser = new SocialUser();\r\n\r\n              user.id = response.profile.CustomerId;\r\n              user.name = response.profile.Name;\r\n              user.email = response.profile.PrimaryEmail;\r\n              user.authToken = authResponse.access_token;\r\n              user.response = response.profile;\r\n\r\n              this.persistToken(authResponse.access_token);\r\n\r\n              resolve(user);\r\n            }\r\n          );\r\n        }\r\n      });\r\n    });\r\n  }\r\n\r\n  signOut(): Promise<void> {\r\n    return new Promise((resolve, reject) => {\r\n      try {\r\n        amazon.Login.logout();\r\n\r\n        this.clearToken();\r\n        resolve();\r\n      } catch (err) {\r\n        reject(err.message);\r\n      }\r\n    });\r\n  }\r\n\r\n  private persistToken(token: string): void {\r\n    localStorage.setItem(`${AmazonLoginProvider.PROVIDER_ID}_token`, token);\r\n  }\r\n\r\n  private retrieveToken(): string {\r\n    return localStorage.getItem(`${AmazonLoginProvider.PROVIDER_ID}_token`);\r\n  }\r\n\r\n  private clearToken(): void {\r\n    localStorage.removeItem(`${AmazonLoginProvider.PROVIDER_ID}_token`);\r\n  }\r\n}\r\n","import { BaseLoginProvider } from '../entities/base-login-provider';\r\nimport { SocialUser } from '../entities/social-user';\r\n\r\ndeclare let VK: any;\r\n\r\nexport class VKLoginProvider extends BaseLoginProvider {\r\n  constructor(\r\n    private clientId: string,\r\n    private initOptions: any = {\r\n      fields: 'photo_max,contacts',\r\n      version: '5.124',\r\n    }\r\n  ) {\r\n    super();\r\n  }\r\n\r\n  public static readonly PROVIDER_ID: string = 'VK';\r\n\r\n  private readonly VK_API_URL = '//vk.com/js/api/openapi.js';\r\n  private readonly VK_API_GET_USER = 'users.get';\r\n\r\n  initialize(): Promise<void> {\r\n    return new Promise((resolve, reject) => {\r\n      try {\r\n        this.loadScript(\r\n          VKLoginProvider.PROVIDER_ID,\r\n          this.VK_API_URL,\r\n          () => {\r\n            VK.init({\r\n              apiId: this.clientId,\r\n            });\r\n\r\n            resolve();\r\n          }\r\n        );\r\n      } catch (err) {\r\n        reject(err);\r\n      }\r\n    });\r\n  }\r\n\r\n  getLoginStatus(): Promise<SocialUser> {\r\n    return new Promise<SocialUser>((resolve: any, reject: any) =>\r\n      this.getLoginStatusInternal(resolve, reject)\r\n    );\r\n  }\r\n\r\n  signIn(): Promise<SocialUser> {\r\n    return new Promise<SocialUser>((resolve: any, reject: any) =>\r\n      this.signInInternal(resolve, reject)\r\n    );\r\n  }\r\n\r\n  signOut(): Promise<void> {\r\n    return new Promise((resolve, reject) => {\r\n      VK.Auth.logout((response: any) => {\r\n        resolve();\r\n      });\r\n    });\r\n  }\r\n\r\n  private signInInternal(resolve: any, reject: any) {\r\n    VK.Auth.login((loginResponse: any) => {\r\n      if (loginResponse.status === 'connected') {\r\n        this.getUser(\r\n          loginResponse.session.mid,\r\n          loginResponse.session.sid,\r\n          resolve\r\n        );\r\n      }\r\n    });\r\n  }\r\n\r\n  private getUser(userId: any, token: any, resolve: any) {\r\n    VK.Api.call(\r\n      this.VK_API_GET_USER,\r\n      {\r\n        user_id: userId,\r\n        fields: this.initOptions.fields,\r\n        v: this.initOptions.version,\r\n      },\r\n      (userResponse: any) => {\r\n        resolve(\r\n          this.createUser(\r\n            Object.assign({}, { token }, userResponse.response[0])\r\n          )\r\n        );\r\n      }\r\n    );\r\n  }\r\n\r\n  private getLoginStatusInternal(resolve: any, reject: any) {\r\n    VK.Auth.getLoginStatus((loginResponse: any) => {\r\n      if (loginResponse.status === 'connected') {\r\n        this.getUser(\r\n          loginResponse.session.mid,\r\n          loginResponse.session.sid,\r\n          resolve\r\n        );\r\n      }\r\n    });\r\n  }\r\n\r\n  private createUser(response: any): SocialUser {\r\n    const user: SocialUser = new SocialUser();\r\n    user.id = response.id;\r\n    user.name = `${response.first_name} ${response.last_name}`;\r\n    user.photoUrl = response.photo_max;\r\n    user.authToken = response.token;\r\n    return user;\r\n  }\r\n}\r\n","import { BaseLoginProvider } from '../entities/base-login-provider';\r\nimport { SocialUser } from '../entities/social-user';\r\n\r\n/**\r\n * Protocol modes supported by MSAL.\r\n */\r\nexport enum ProtocolMode {\r\n  AAD = 'AAD',\r\n  OIDC = 'OIDC'\r\n}\r\n\r\n/**\r\n * Initialization Options for Microsoft Provider: https://github.com/AzureAD/microsoft-authentication-library-for-js/blob/dev/lib/msal-browser/docs/initialization.md\r\n * Details (not all options are supported): https://github.com/AzureAD/microsoft-authentication-library-for-js/blob/dev/lib/msal-browser/docs/configuration.md\r\n */\r\nexport type MicrosoftOptions = {\r\n  redirect_uri?: string,\r\n  logout_redirect_uri?: string,\r\n  authority?: string,\r\n  knownAuthorities?: string[],\r\n  protocolMode?: ProtocolMode,\r\n  clientCapabilities?: string[],\r\n  cacheLocation?: string,\r\n  scopes?: string[],\r\n  prompt?: string,\r\n};\r\n\r\n// Collection of internal MSAL interfaces from: https://github.com/AzureAD/microsoft-authentication-library-for-js/tree/dev/lib/msal-browser/src\r\n\r\ninterface MSALAccount {\r\n  environment: string;\r\n  homeAccountId: string;\r\n  tenantId: string;\r\n  username: string;\r\n}\r\n\r\ninterface MSGraphUserInfo {\r\n  businessPhones: string[];\r\n  displayName: string;\r\n  givenName: string;\r\n  id: string;\r\n  jobTitle: string;\r\n  mail: string;\r\n  mobilePhone: string;\r\n  officeLocation: string;\r\n  preferredLanguage: string;\r\n  surname: string;\r\n  userPrincipalName: string;\r\n}\r\n\r\ninterface MSALLoginRequest {\r\n  scopes?: string[];\r\n  sid?: string;\r\n  loginHint?: string;\r\n  domainHint?: string;\r\n  prompt?: string;\r\n}\r\n\r\ninterface MSALLoginResponse {\r\n  accessToken: string;\r\n  account: MSALAccount;\r\n  expiresOn: Date;\r\n  extExpiresOn: Date;\r\n  familyId: string;\r\n  fromCache: boolean;\r\n  idToken: string;\r\n  idTokenClaims: any;\r\n  scopes: string[];\r\n  state: string;\r\n  tenantId: string;\r\n  uniqueId: string;\r\n}\r\n\r\ninterface MSALLogoutRequest {\r\n  account?: MSALAccount;\r\n  postLogoutRedirectUri?: string;\r\n  authority?: string;\r\n  correlationId?: string;\r\n}\r\n\r\ninterface MSALClientApplication {\r\n  getAllAccounts(): MSALAccount[];\r\n  logoutPopup(logoutRequest?: MSALLogoutRequest): Promise<void>;\r\n  loginPopup(loginRequest: MSALLoginRequest): Promise<MSALLoginResponse>;\r\n  ssoSilent(loginRequest: MSALLoginRequest): Promise<MSALLoginResponse>;\r\n  acquireTokenSilent(loginRequest: MSALLoginRequest): Promise<MSALLoginResponse>;\r\n  getAccountByHomeId(homeAccountId: string): MSALAccount;\r\n}\r\n\r\ndeclare let msal: any;\r\n\r\nconst COMMON_AUTHORITY: string = 'https://login.microsoftonline.com/common/';\r\n\r\n/**\r\n * Microsoft Authentication using MSAL v2: https://github.com/AzureAD/microsoft-authentication-library-for-js/tree/dev/lib/msal-browser\r\n */\r\nexport class MicrosoftLoginProvider extends BaseLoginProvider {\r\n  private _instance: MSALClientApplication;\r\n  public static readonly PROVIDER_ID: string = 'MICROSOFT';\r\n\r\n  private initOptions: MicrosoftOptions = {\r\n    authority: COMMON_AUTHORITY,\r\n    scopes: ['openid', 'email', 'profile', 'User.Read'],\r\n    knownAuthorities: [],\r\n    protocolMode: ProtocolMode.AAD,\r\n    clientCapabilities: [],\r\n    cacheLocation: 'sessionStorage'\r\n  };\r\n\r\n  constructor(\r\n    private clientId: string,\r\n    initOptions?: MicrosoftOptions\r\n  ) {\r\n    super();\r\n\r\n    this.initOptions = {\r\n      ...this.initOptions,\r\n      ...initOptions\r\n    };\r\n  }\r\n\r\n  initialize(): Promise<void> {\r\n    return new Promise((resolve, reject) => {\r\n      this.loadScript(\r\n        MicrosoftLoginProvider.PROVIDER_ID,\r\n        'https://alcdn.msauth.net/browser/2.13.1/js/msal-browser.min.js',\r\n        () => {\r\n          try {\r\n            const config = {\r\n              auth: {\r\n                clientId: this.clientId,\r\n                redirectUri: this.initOptions.redirect_uri ?? location.origin,\r\n                authority: this.initOptions.authority,\r\n                knownAuthorities: this.initOptions.knownAuthorities,\r\n                protocolMode: this.initOptions.protocolMode,\r\n                clientCapabilities: this.initOptions.clientCapabilities\r\n              },\r\n              cache: !this.initOptions.cacheLocation ? null : {\r\n                cacheLocation: this.initOptions.cacheLocation\r\n              }\r\n            };\r\n\r\n            this._instance = new msal.PublicClientApplication(config);\r\n            resolve();\r\n          } catch (e) {\r\n            reject(e);\r\n          }\r\n        }\r\n      );\r\n    });\r\n  }\r\n\r\n  private getSocialUser(loginResponse): Promise<SocialUser> {\r\n    return new Promise<SocialUser>((resolve, reject) => {\r\n      //After login, use Microsoft Graph API to get user info\r\n      let meRequest = new XMLHttpRequest();\r\n      meRequest.onreadystatechange = () => {\r\n        if (meRequest.readyState == 4) {\r\n          try {\r\n            if (meRequest.status == 200) {\r\n              let userInfo = <MSGraphUserInfo>JSON.parse(meRequest.responseText);\r\n\r\n              let user: SocialUser = new SocialUser();\r\n              user.provider = MicrosoftLoginProvider.PROVIDER_ID;\r\n              user.id = loginResponse.idToken;\r\n              user.authToken = loginResponse.accessToken;\r\n              user.name = loginResponse.idTokenClaims.name;\r\n              user.email = loginResponse.account.username;\r\n              user.idToken = loginResponse.idToken;\r\n              user.response = loginResponse;\r\n              user.firstName = userInfo.givenName;\r\n              user.lastName = userInfo.surname;\r\n\r\n              resolve(user);\r\n            } else {\r\n              reject(`Error retrieving user info: ${meRequest.status}`);\r\n            }\r\n          } catch (err) {\r\n            reject(err);\r\n          }\r\n        }\r\n      };\r\n\r\n      //Microsoft Graph ME Endpoint: https://docs.microsoft.com/en-us/graph/api/user-get?view=graph-rest-1.0&tabs=http\r\n      meRequest.open('GET', 'https://graph.microsoft.com/v1.0/me');\r\n      meRequest.setRequestHeader('Authorization', `Bearer ${loginResponse.accessToken}`);\r\n      try {\r\n        meRequest.send();\r\n      } catch (err) {\r\n        reject(err);\r\n      }\r\n    });\r\n  }\r\n\r\n  async getLoginStatus(): Promise<SocialUser> {\r\n    const accounts = this._instance.getAllAccounts();\r\n    if (accounts?.length > 0) {\r\n      const loginResponse = await this._instance.ssoSilent({\r\n        scopes: this.initOptions.scopes,\r\n        loginHint: accounts[0].username\r\n      });\r\n      return await this.getSocialUser(loginResponse);\r\n    } else {\r\n      throw `No user is currently logged in with ${MicrosoftLoginProvider.PROVIDER_ID}`;\r\n    }\r\n  }\r\n\r\n  async signIn(): Promise<SocialUser> {\r\n    const loginResponse = await this._instance.loginPopup({\r\n      scopes: this.initOptions.scopes,\r\n      prompt: this.initOptions.prompt,\r\n    });\r\n    return await this.getSocialUser(loginResponse);\r\n  }\r\n\r\n  async signOut(revoke?: boolean): Promise<void> {\r\n    const accounts = this._instance.getAllAccounts();\r\n    if (accounts?.length > 0) {\r\n      await this._instance.logoutPopup({\r\n        account: accounts[0],\r\n        postLogoutRedirectUri: this.initOptions.logout_redirect_uri ?? this.initOptions.redirect_uri ?? location.href\r\n      })\r\n    }\r\n  }\r\n}\r\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"]},"metadata":{},"sourceType":"module"}